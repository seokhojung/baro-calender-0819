좋아요. 아래는 **Cursor AI에 그대로 붙여넣어 실행**할 수 있는 “보완 프롬프트 패키지”입니다.
파일별(요구서, 아키텍처, ShadCN 규칙)로 나눴고, 각 프롬프트는 **수정 의도 → 실행 지시 → 삽입 템플릿 → 수용 기준(acceptance criteria) → 커밋 메시지 템플릿** 순서로 구성했습니다.

---

# 0) 공통 시스템 프롬프트(한 번만 실행)

아래 블록을 **먼저** Cursor에 붙여넣어 시스템 가드레일로 사용하세요.

```
[ROLE] 너는 BMAD 방식 문서 편집 에디터다.
[GOAL] 아래 각 파일의 일관성·완결성·검증가능성을 높인다. 기존 내용은 존중하되, 누락된 섹션은 추가하고 중복/혼선을 제거한다.
[STYLE] 한국어, Markdown 규격 준수, 제목/목차/코드블록 포맷 정돈. 섹션 간 연결문(한두 문장)을 넣어 독해 흐름을 보완.
[DO-NOT]
- 원문의 핵심 결정을 임의로 뒤집지 말 것.
- 라이브러리 교체를 강행하지 말 것(단, 본문 목표 달성 위해 도구 단일화가 필요할 땐 명시적 근거와 함께 제안).
[ACCEPTANCE-GLOBAL]
- 파일 저장 전 Markdown 린트(제목 수준, 목록·표 문법, 코드펜스) 정상.
- 새로 추가한 표/코드/목록은 미리보기에서 깨지지 않음.
```

---

# 1) front-end-spec.md 보완 프롬프트

```
[FILE] front-end-spec.md

[INTENT]
- 화면별 상태(Loading/Empty/Error) UX와 카피, 접근성(키보드 경로/라벨링/명암비) 표를 추가한다.
- 테스트 전략에 커버리지 수치와 핵심 시나리오를 명시한다.
- 용어/작명 규칙 표를 추가하여 레포 전반의 일관성을 확보한다.

[TASKS]
1) 다음 새 섹션들을 "기존 목차 흐름을 유지"하면서 적정 위치에 추가하거나 병합:
   - 상태 UX 가이드(Loading/Empty/Error)
   - 접근성 체크표(A11y)
   - 테스트 전략(KPI/시나리오/커버리지)
   - 네이밍 & 폴더 규칙 표

2) 각 섹션은 아래 템플릿을 사용하되, 문서 톤/용어와 자연스럽게 맞춘다.

[INSERT-TEMPLATES]

## 상태 UX 가이드
- Loading: 스켈레톤(최대 2초), 2초 초과 시 진행률/설명 제공. 스크린리더용 `aria-busy="true"` 적용.
- Empty: 상황 설명 한 줄 + 기본 CTA(예: “일정을 추가하세요”) + 보조 링크(가이드).
- Error: 표준 ApiError 맵핑(네트워크/권한/검증/서버). ARIA live polite, 포커스 첫 에러로 이동, 재시도 버튼 포함.
- 토스트 사용 기준: 비파괴적·단기 정보만(3~5초), 파괴적 오류는 인라인/모달.

### 화면별 상태 요약 표
| 화면 | Loading | Empty | Error | 포커스 이동 규칙 |
|---|---|---|---|---|
| 달력 목록 | 스켈레톤 | “일정이 없습니다” + 추가 버튼 | 재시도 + 로그링크 | 에러 배너로 이동 |
| 일정 상세 | 스켈레톤 | “선택된 일정 없음” | 재시도 | 에러 카드 헤더 |

## 접근성 체크리스트 (WCAG AA)
- 키보드 경로: 모든 인터랙션은 Tab/Shift+Tab, Enter/Space로 조작 가능.
- 역할·이름·값: 네비게이션/버튼/모달/토글 등 ARIA 롤/라벨 정의.
- 명암비: 텍스트 4.5:1 이상, 비텍스트 3:1 이상.
- 스크린리더: 상태 변화는 `aria-live`로 공지, 모달은 포커스 트랩.

### A11y 표
| 요소 | 규칙 | 예시 |
|---|---|---|
| 모달 | role="dialog", aria-modal, 첫 포커스 지정 | 편집 모달 오픈 시 닫기 버튼에 포커스 |
| 토스트 | aria-live="polite" | 저장 성공 안내 |
| 폼 에러 | aria-describedby로 필드 에러 연결 | 제목 입력 필수 |

## 테스트 전략
- 커버리지 목표: statements≥80%, branches≥80%, lines≥80%.
- 정적 검사: ESLint/TypeCheck/MDLint.
- 단위/통합: Jest + RTL(+ axe)로 접근성 단위 테스트 포함.
- E2E: Playwright. 태그: @smoke(신규/수정 시), @regression(릴리즈 전).

### 핵심 시나리오(E2E)
- 일정 생성/편집/삭제/검색/필터/오프라인 생성 후 동기화.
- 접근성: 키보드로 일정 생성 플로우 완주, 모달 포커스 트랩 검증.

## 네이밍 & 폴더 규칙
| 항목 | 규칙 | 예시 |
|---|---|---|
| 컴포넌트 | PascalCase | CalendarList.tsx |
| 훅 | useCamelCase | useEventSource.ts |
| 유틸 | camelCase | formatDate.ts |
| 테스트 | *.test.ts(x) | CalendarList.test.tsx |
| 폴더 | kebab-case | calendar-list/ |

[ACCEPTANCE]
- 새 섹션들이 목차에 반영되고, 문장/표/코드 블록이 깨지지 않는다.
- 상태 UX 표와 A11y 표가 최소 2개 화면 예시를 포함한다.
- 테스트 전략에 커버리지 수치와 시나리오가 명시되어 있다.

[COMMIT]
feat(spec): 상태 UX·A11y 표·테스트 전략 및 네이밍 규칙 추가
```

---

# 2) ui-architecture.md 보완 프롬프트

> 기본안은 \*\*React Query 단일화(옵션 B)\*\*입니다. 만약 프로젝트가 GraphQL 중심이면 맨 아래 “Apollo 대안 프롬프트”를 사용하세요.

````
[FILE] ui-architecture.md

[INTENT]
- 서버 상태 관리 도구를 단일화하고, 전역 에러 포맷(ApiError)과 핸들링 체계를 명시한다.
- Observability(에러/성능/사용로그) 섹션과 CI 성능/접근성 게이트를 추가한다.

[TASKS]
1) "서버 상태 관리" 결론을 React Query 단일화로 명시하고, GraphQL 호출은 graphql-request 등 경량 어댑터로 처리.
2) ApiError 타입과 HTTP↔UI 에러 맵핑 표, 전역 핸들링(요청 어댑터/Boundary/토스트 규칙) 추가.
3) Observability 섹션: Error Tracking(Sentry), Core Web Vitals, API 응답 시간, 사용자 이벤트 로깅, 알림 경로.
4) CI 파이프라인에 Lighthouse CI/axe/Playwright 임계치 정의.

[INSERT-TEMPLATES]

## 서버 상태 관리 원칙
- 표준 도구: **React Query**
- 이유: 이질적 데이터 소스(REST/GQL) 혼합 시 캐시/리트라이/동기화 일관성, 학습 비용 최소화.
- GraphQL 호출: `graphql-request` + React Query 어댑터.
- 금지: 컴포넌트에서 직접 fetch 호출. 모든 원격 호출은 service→api 레이어 경유.

### 호출 수명주기 규칙
- staleTime, retry(지수백오프), 에러 클래스 맵핑, 취소 시그널 적용.
- 뮤테이션 후 영향 쿼리 키 무효화 표준화.

## 표준 에러 포맷
```ts
export type ApiError = {
  code: string;          // ex) E401_UNAUTHORIZED, E422_VALIDATION
  message: string;       // 사용자 노출용 메시지(국문)
  details?: unknown;     // 필드 에러 등
  requestId?: string;    // 백엔드/게이트웨이 트레이스
  timestamp?: string;
};
````

### HTTP ↔ UI 에러 맵핑

| HTTP | ApiError.code      | UI 처리       | 토스트/배너   |
| ---- | ------------------ | ----------- | -------- |
| 401  | E401\_UNAUTHORIZED | 로그인 페이지 이동  | 배너 안내    |
| 403  | E403\_FORBIDDEN    | 권한 안내 + 홈으로 | 배너       |
| 404  | E404\_NOT\_FOUND   | Empty 상태    | 토스트 없음   |
| 422  | E422\_VALIDATION   | 필드 하이라이트    | 인라인 에러   |
| 5xx  | E500\_SERVER       | 재시도 버튼      | 토스트 + 배너 |

### 전역 핸들링

* 요청 어댑터: 응답 에러를 ApiError로 정규화.
* UI: ErrorBoundary(페이지/컴포넌트), aria-live, 포커스 이동 규칙.

## Observability

* Error Tracking: Sentry SDK, ApiError.requestId 전파.
* 성능: LCP/INP/CLS 수집, 페이지 전환 TTI/JS 오류율 대시보드.
* 사용자 이벤트: 일정 생성/편집/삭제/검색/필터 이벤트 로깅.
* 알림: 에러율/응답시간 임계치 초과 시 Slack #alerts 채널.

## CI 파이프라인(요약)

* Lint/Type/Unit → a11y(unit: axe) → E2E(Playwright: @smoke, @regression)
* Lighthouse CI 임계치: Performance≥90, Accessibility≥95, Best Practices≥95, SEO≥90
* 중단 조건: 임계치 미달/테스트 실패 시 머지 금지.

\[ACCEPTANCE]

* “서버 상태 관리 원칙/ApiError/Observability/CI 파이프라인” 섹션이 새로 생기거나 기존과 자연스럽게 병합된다.
* ApiError 타입과 맵핑 표가 문서에 포함되어 있다.
* 금지/권장 규칙이 명확히 서술되어 있다.

\[COMMIT]
feat(arch): React Query 단일화·ApiError 표준·Observability·CI 성능 게이트 추가

```

### (대안) GraphQL 중심일 때 Apollo 단일화 프롬프트
```

\[PATCH-ALT]

* "React Query"를 "Apollo Client"로 치환.
* 이유: 정규화 캐시/Subscription/프래그먼트 기반 업데이트 최적.
* REST는 fetch 최소화, Apollo Link로 공통 어댑터/에러정규화.
* 그 외 ApiError/Observability/CI 파트는 동일하게 유지.
  \[COMMIT]
  feat(arch): Apollo 단일화·ApiError 표준·Observability·CI 성능 게이트 추가

```

---

# 3) shadcn-ui-workflow-rules.md 보완 프롬프트
```

\[FILE] shadcn-ui-workflow-rules.md

\[INTENT]

* MCP 기반 흐름을 기본으로 하되, 수동 적용 허용 조건과 예외 승인/회수 절차를 명문화한다.
* 컴포넌트 주석 템플릿과 실행 커맨드 예시를 추가해 실수(명령 누락)를 방지한다.

\[TASKS]

1. "수동 허용 조건"과 "예외 승인/회수 절차" 섹션을 추가.
2. MCP 생성물 주석 템플릿을 코드 블록으로 추가.
3. 실행 커맨드 예시를 복사-붙여넣기 가능한 블록으로 추가.
4. 변경 이력 섹션(버전/날짜/요약) 갱신.

\[INSERT-TEMPLATES]

## 수동 적용 허용 조건

* MCP 서버 장애/네트워크 제약/신규 컴포넌트 미지원/보안 정책 상 패키지 설치 제한.
* 임시 허용은 **이슈 티켓** 생성과 **리뷰어 승인**을 전제로 한다.

## 예외 승인·회수 절차

1. 이슈 생성: 배경/영향 영역/대안/리스크/회수 계획 서술.
2. 승인: UI 리드 1인 + FE 리드 1인.
3. 회수: MCP 지원이 복구/추가되면 수동 커밋을 MCP 규격으로 재생성 후 원본 폐기.

## MCP 생성물 주석 템플릿

```tsx
/**
 * Source: shadcn-ui-mcp
 * Command: npx shadcn-ui-mcp-server [args...]
 * Component: Button
 * Version: vX.Y.Z
 * GeneratedAt: 2025-08-20T00:00:00Z
 */
```

## 실행 커맨드 예시(복붙용)

```bash
# MCP 서버 실행
npx shadcn-ui-mcp-server

# 컴포넌트 목록 조회(예: MCP 인덱스 명령)
npx shadcn-ui-mcp-server --list components

# 컴포넌트 추가
npx shadcn-ui-mcp-server --add button input dialog

# 토큰 필요 시 환경변수
set GITHUB_TOKEN=xxx   # Windows
export GITHUB_TOKEN=xxx # macOS/Linux
```

## 변경 이력

* 2025-08-20: 수동 허용/예외 승인·회수/주석 템플릿/명령 예시 추가.

\[ACCEPTANCE]

* 수동 허용 조건과 승인·회수 절차가 명확히 문서화된다.
* 주석 템플릿과 커맨드 예시가 코드블록으로 추가된다.
* 변경 이력이 갱신된다.

\[COMMIT]
docs(shadcn): 수동 허용·예외 절차·주석 템플릿·명령 예시 추가

```

---

## 4) 적용 후 자동 검수 프롬프트(선택)
수정이 끝난 뒤, Cursor에 아래를 붙여넣어 **자체 QA**를 돌리세요.

```

\[VERIFY]

1. front-end-spec.md에 상태 UX 표·A11y 표·테스트 전략 커버리지 수치가 있는지 검사.
2. ui-architecture.md에 서버 상태 단일화 결론, ApiError 타입/맵핑 표, Observability/CI 임계치가 있는지 검사.
3. shadcn-ui-workflow-rules.md에 수동 허용 조건, 예외 승인/회수 절차, 주석 템플릿, 명령 예시가 추가됐는지 검사.
4. 세 문서의 수치·용어가 상호 충돌하지 않는지(예: 접근성 목표치·성능 KPI) 교차 검증.
5. 필요 시 간단한 오탈자/문장 매끄러움까지 자동 교정. 변경 요약과 함께 커밋 메시지 제안.

```

---

